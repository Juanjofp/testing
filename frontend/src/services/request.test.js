import * as rxAjax from 'rxjs/ajax';
import * as rxOf from 'rxjs';
import {
    request,
    handleResponse,
    handleError
} from './request';

jest.mock('rxjs/ajax', () => (
    {
        ajax: jest.fn()
    }
));
jest.mock('rxjs', () => (
    {
        of: jest.fn()
    }
));

describe(
    'Request should',
    () => {

        beforeEach(
            () => {
                rxOf.of.mockClear();
                rxAjax.ajax.mockClear();
            }
        );
        it(
            'call ajax with method POST and options with body',
            () => {
                const HOST = 'http://fakedomain.com';
                const resource = '/admin/login';
                const method = 'POST';
                const token = 'tokenmegasecreto';
                const username = 'Juanjo';
                const password =  '123456';
                const options = {
                    token,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: {
                        username,
                        password
                    }
                };
                const expecteRequest = {
                    url: HOST + resource,
                    method: method,
                    crossDomain: true,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: { username, password }
                };

                request(HOST)(method, resource, options);

                expect(rxAjax.ajax).toHaveBeenCalledWith(expect.objectContaining(expecteRequest));
            }
        );

        it(
            'call ajax with method GET and token',
            () => {
                const HOST = 'http://fakedomain.com';
                const resource = '/admin/list';
                const method = 'GET';
                const token = 'tokenmegasecreto';
                const options = {
                    token
                };
                const expecteRequest = {
                    url: HOST + resource,
                    method: method,
                    crossDomain: true,
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                };

                request(HOST)(method, resource, options);

                expect(rxAjax.ajax).toHaveBeenCalledWith(expect.objectContaining(expecteRequest));
            }
        );

        it(
            'destructure and mapping response received when no error',
            () => {
                const user = 'Juanjo';
                const img_profile = 'http://avatar.com';
                const status = 1;
                const result = {
                    response: {
                        user,
                        img_profile,
                        status
                    }
                };
                const mapping = (resp) => ({
                    displayName: user,
                    avatar: img_profile,
                    online: status === 1 ? true : false
                });
                const expectedResponse = {
                    displayName: user,
                    avatar: img_profile,
                    online: true
                };

                const handledResponse = handleResponse(result, mapping);

                expect(handledResponse).toEqual(expect.objectContaining(expectedResponse));
            }
        );

        it(
            'destructure response received when error',
            () => {
                const error = 412;
                const message = 'Invalid values';
                const result = {
                    response: { error, message}
                };
                const expectedResponse = {
                    errorCode: error,
                    message
                };

                handleError(result);

                expect(rxOf.of).toHaveBeenCalledWith(expect.objectContaining(expectedResponse));
            }
        );

        it(
            'destructure error generated by ajax function',
            () => {
                const error = 418;
                const message = 'Ajax failed with 0';
                const result = new Error(message);
                const expectedResponse = {
                    errorCode: error,
                    message
                };

                handleError(result);

                expect(rxOf.of).toHaveBeenCalledWith(expect.objectContaining(expectedResponse));
            }
        );
    }
);